/* ======= helpers ======= */
const LS=(k,v)=>v===undefined?JSON.parse(localStorage.getItem(k)||'null'):localStorage.setItem(k,JSON.stringify(v));
const qs=(s,el=document)=>el.querySelector(s);
const qsa=(s,el=document)=>[...el.querySelectorAll(s)];
const toast=(m)=>{const t=qs('#toast'); if(!t) return; t.textContent=m; t.classList.add('show'); setTimeout(()=>t.classList.remove('show'),1800);};
const encodePath=p=>('/'+encodeURI(p.replace(/^\/+/,'').replace(/\\/g,'/')));
function toPublicUrl(winPath){ const s=winPath.replace(/\\/g,'/'); const m=s.match(/\/public\/.+$/i); const rel=m?m[0]:s; return encodePath(rel); }

/* ======= path (Java/Bedrock) ======= */
function initPath(){ const p=LS('mc_path')||'java'; setPath(p); qsa('[data-pick-path]').forEach(b=>b.addEventListener('click',()=>setPath(b.dataset.pickPath))); }
function setPath(path){ LS('mc_path',path); const badge=qs('#pathBadge'); if(badge) badge.textContent=`Path: ${path[0].toUpperCase()+path.slice(1)}`; qsa('[data-path]').forEach(el=>{ el.style.display=(el.dataset.path===path||el.dataset.path==='both')?'':'none' }); qsa('[data-path-only]').forEach(el=>{ el.hidden = el.dataset.pathOnly!==path }); }

/* ======= Focus Mode (subtle) ======= */
function initFocusMode(){ const enabled=localStorage.getItem('focus_mode')==='1'; if(enabled) document.body.classList.add('kid'); const btn=qs('#focusToggle'); if(btn){ btn.addEventListener('click',()=>{ const on=document.body.classList.toggle('kid'); localStorage.setItem('focus_mode', on?'1':'0'); toast(on?'Focus Mode on':'Focus Mode off'); }); } }

/* ======= wallpaper (per page override via <meta name="page-wallpaper">) ======= */
function initWallpaper(){ const el=qs('.wallpaper'); if(!el) return; const meta=qs('meta[name="page-wallpaper"]'); const override=meta?.content; let url=override||LS('wallpaper_url')||'/public/wallpapers/wallpaper_geometry.JPG'; el.style.backgroundImage=`url('${url}')`; qsa('[data-set-wall]').forEach(btn=>btn.addEventListener('click',()=>{ const u=btn.dataset.setWall; LS('wallpaper_url',u); el.style.backgroundImage=`url('${u}')`; toast('Wallpaper set'); })); }

/* ======= XP / quests ======= */
function initXP(){ const state=LS('xp_state')||{xp:0,completed:{}}; const update=()=>{ const total=Object.keys(state.completed).length; const pct=Math.min(100,Math.round((total/12)*100)); const ring=qs('#progress'); if(ring){ ring.style.setProperty('--p',`${pct*3.6}deg`); ring.querySelector('b').textContent=`${pct}%`; } LS('xp_state',state); qs('#xpCount')&&(qs('#xpCount').textContent=state.xp); }; qsa('input[type=checkbox][data-quest-id]').forEach(cb=>{ const id=cb.dataset.questId; cb.checked=!!state.completed[id]; cb.addEventListener('change',()=>{ if(cb.checked){ state.completed[id]=true; state.xp+=5; toast('+5 XP'); } else { delete state.completed[id]; state.xp=Math.max(0,state.xp-5); toast('Quest unchecked'); } update(); }); }); update(); }

/* ======= Quips (topic-aware) ======= */
async function loadQuips(){ const el=qs('#quip'); if(!el) return; const topic=document.body.dataset.topic||'general'; let pool=[]; try{ const r=await fetch('/public/data/quips.json',{cache:'no-store'}); if(r.ok){ const all=await r.json(); pool=(all[topic]||all.general||[]); } }catch(_){} if(!pool.length){ pool=["Every great mod starts small.","Debugging = detective work.","Ship small, ship often.","Art first, code second."]; } const pick=()=>{ el.textContent = pool[Math.floor(Math.random()*pool.length)]; }; pick(); qs('#newQuip')?.addEventListener('click',pick); }

/* ======= preview modal ======= */
function openPreview(kind,url,label){ const back=document.createElement('div'); back.className='modalBack show'; const inner=document.createElement('div'); inner.className='modal'; inner.innerHTML=`<header><h3>Preview</h3><button class="btn small secondary" id="pvClose">Close</button></header>`+(kind==='image'?`<img src="${url}" alt=""><div class="previewMeta"><button class="btn small" id="pvSet">Set as wallpaper</button><a class="btn small secondary" href="${url}" download>Download</a><small class="muted">${label||url}</small></div>`:`<audio controls src="${url}" style="width:100%"></audio><div class="previewMeta"><a class="btn small secondary" href="${url}" download>Download</a><small class="muted">${label||url}</small></div>`); back.appendChild(inner); document.body.appendChild(back); qs('#pvClose',inner).onclick=()=>back.remove(); qs('#pvSet',inner)?.addEventListener('click',()=>{ LS('wallpaper_url',url); const w=qs('.wallpaper'); if(w) w.style.backgroundImage=`url('${url}')`; toast('Wallpaper set'); back.remove(); }); }
window.openPreview=openPreview;

/* ======= Asset Library ======= */
let _assetIndex=null;
async function loadAssetIndex(){ if(_assetIndex) return _assetIndex; const res=await fetch('/public/data/asset_index.json',{cache:'no-store'}); if(!res.ok) throw new Error('index missing'); _assetIndex=await res.json(); return _assetIndex; }
function fileKind(path){ const ext=path.split('.').pop().toLowerCase(); if(['png','jpg','jpeg','gif','webp'].includes(ext)) return 'image'; if(['mp3','wav','ogg'].includes(ext)) return 'audio'; return 'file'; }
function topFolder(path){ const p=path.replace(/^public\//,''); return p.split('/')[0]||'public'; }
async function initLibrary(){ const grid=qs('#assetGrid'); if(!grid) return; try{ const data=await loadAssetIndex(); const entries=Object.keys(data).sort(); const ctrls={filter:qs('#assetFilter'),search:qs('#assetSearch'),folder:qs('#assetFolder')}; if(ctrls.folder){ const folders=[...new Set(entries.map(topFolder))].sort(); ctrls.folder.innerHTML='<option value="all">All folders</option>'+folders.map(f=>`<option value="${f}">${f}</option>`).join(''); } function render(){ const val=ctrls.filter?.value||'all', q=(ctrls.search?.value||'').toLowerCase(), fsel=ctrls.folder?.value||'all'; const items=[]; for(const path of entries){ const kind=fileKind(path); const okType=(val==='all')||(val==='images'&&kind==='image')||(val==='audio'&&kind==='audio'); const okFolder=(fsel==='all')||(topFolder(path)===fsel); const okSearch=!q||path.toLowerCase().includes(q); if(!(okType&&okFolder&&okSearch)) continue; const url='/'+path.replace(/^\/+/,''); if(kind==='image'){ items.push(`<div class="asset"><img src="${url}" alt="" onclick="openPreview('image','${url}','${path.replace(/"/g,'&quot;')}')"><div class="row"><button class="btn small" data-set-wall="${url}">Set wallpaper</button><button class="btn small secondary" onclick="openPreview('image','${url}','${path.replace(/"/g,'&quot;')}')">Preview</button></div><small class="muted">${path}</small></div>`); } else if(kind==='audio'){ items.push(`<div class="asset"><audio controls src="${url}"></audio><div class="row"><button class="btn small secondary" onclick="openPreview('audio','${url}','${path.replace(/"/g,'&quot;')}')">Preview</button><a class="btn small secondary" href="${url}" download>Download</a></div><small class="muted">${path}</small></div>`); } else { items.push(`<div class="asset"><div class="muted">File</div><a class="btn small secondary" href="${url}" download>Download</a><small class="muted">${path}</small></div>`); } } grid.innerHTML=items.join(''); initWallpaper(); } ctrls.filter?.addEventListener('change',render); ctrls.search?.addEventListener('input',render); ctrls.folder?.addEventListener('change',render); render(); } catch(e){ grid.innerHTML=`<div class="muted">No asset index found. Use <b>Build Index</b> to create <code>/public/data/asset_index.json</code>.</div>`; } }

/* ======= Build Asset Index (local, offline) ======= */
function initBuilder(){ const input=qs('#dirPicker'); if(!input) return; const out=qs('#builderOut'); input.addEventListener('change',e=>{ const files=e.target.files; if(!files?.length){ out.textContent='No files picked.'; return; } const index={}; for(const f of files){ let rel=f.webkitRelativePath||f.name; rel=rel.replace(/\\/g,'/'); if(!/^public\//.test(rel)) rel=`public/${rel}`; index[rel]={size:f.size,type:f.type||''}; } const blob=new Blob([JSON.stringify(index,null,2)],{type:'application/json'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='asset_index.json'; a.click(); out.innerHTML='Downloaded <b>asset_index.json</b>. Put it at <code>/public/data/asset_index.json</code>.'; LS('last_scan',Date.now()); }); }

/* ======= Backup + reminder ======= */
function exportBackup(){ const pack={when:new Date().toISOString(),xp_state:LS('xp_state')||{},mc_path:LS('mc_path')||'java',wallpaper_url:LS('wallpaper_url')||'',notepad_text:localStorage.getItem('notepad_text')||'',focus_mode:localStorage.getItem('focus_mode')||'0'}; const blob=new Blob([JSON.stringify(pack,null,2)],{type:'application/json'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download=`mindscape-backup-${new Date().toISOString().slice(0,10)}.json`; a.click(); localStorage.setItem('backup_when',Date.now()); }
function initBackupBanner(){ const week=6048e5,last=+localStorage.getItem('backup_when')||0; if(Date.now()-last<week) return; const bar=document.createElement('div'); bar.className='banner'; bar.innerHTML=`ðŸ”” <b>Reminder:</b> Back up progress. <button class="btn small pill" id="doExport">Export</button>`; qs('main')?.prepend(bar); qs('#doExport')?.addEventListener('click',()=>{ exportBackup(); toast('Backup exported'); bar.remove(); }); }

/* ======= Do it for me (sets wall + opens builder + hot picks) ======= */
async function doItForMe(){ const candidates=[ toPublicUrl("G:\\My Drive\\Mission-Control-2\\public\\wallpapers\\wallpaper_geometry.JPG"), toPublicUrl("G:\\My Drive\\Mission-Control-2\\public\\wallpapers\\weapons_workshop_minecraft.png"), toPublicUrl("G:\\My Drive\\Mission-Control-2\\public\\wallpapers\\bc_welcome_to_the_mindscape_wallpaper.webp") ]; let chosen=candidates[0]; for(const u of candidates){ try{ const r=await fetch(u,{method:'HEAD',cache:'no-store'}); if(r.ok){ chosen=u; break; } }catch(_){} } LS('wallpaper_url',chosen); qs('.wallpaper')?.style.setProperty('background-image',`url('${chosen}')`); toast('Wallpaper set'); qs('#dirPicker')?.click(); toast('Pick your /public folder â†’ Iâ€™ll build asset_index.json'); exportBackup(); renderHotPicks(); }

/* ======= Hot Picks grid (your GUI icons) ======= */
async function renderHotPicks(){ const el=qs('#hotPicks'); if(!el) return; const raw=[ "G:\\My Drive\\Mission-Control-2\\public\\gui\\UI_Different_Free_Wenrexa1 (Unzipped Files)\\PNG\\Btn_V03.png", "G:\\My Drive\\Mission-Control-2\\public\\gui\\UI_Different_Free_Wenrexa1 (Unzipped Files)\\PNG\\CellBig_02.png", "G:\\My Drive\\Mission-Control-2\\public\\gui\\UI_Different_Free_Wenrexa1 (Unzipped Files)\\PNG\\Btn_V18.png", "G:\\My Drive\\Mission-Control-2\\public\\gui\\UI_Different_Free_Wenrexa1 (Unzipped Files)\\PNG\\Window03_Btn.png" ].map(toPublicUrl); const found=[]; for(const u of raw){ try{ const r=await fetch(u,{method:'HEAD',cache:'no-store'}); if(r.ok) found.push(u); }catch(_){} } if(!found.length){ el.style.display='none'; return; } el.style.display='block'; el.innerHTML=`<h3>Quick Picks</h3><div class="asset-grid">`+found.map(u=>`<div class="asset"><img src="${u}" alt="" onclick="openPreview('image','${u}','${u}')"><div class="row"><button class="btn small secondary" onclick="openPreview('image','${u}','${u}')">Preview</button><a class="btn small secondary" href="${u}" download>Download</a></div><small class="muted">${decodeURI(u)}</small></div>`).join('')+`</div>`; }

/* ======= Drawer (reference steps) ======= */
function initDrawer(){ const btn=qs('#drawerToggle'), drawer=qs('.drawer'); if(!btn||!drawer) return; btn.addEventListener('click',()=>drawer.classList.toggle('open')); }

/* ======= Notebook & AI ======= */
function initNotebook(){ const ta=qs('#notepad'); if(!ta) return; ta.value=localStorage.getItem('notepad_text')||''; ta.addEventListener('input',()=>localStorage.setItem('notepad_text',ta.value)); }
function initAI(){ const btn=qs('#askAI'); if(!btn) return; btn.addEventListener('click',()=>{ const key=qs('#geminiKey').value.trim(); if(!key){ toast('No AI key set â€” offline mode.'); return; } localStorage.setItem('GEMINI_KEY',key); toast('Key saved locally.'); }); }

/* ======= manual refresh ======= */
function refreshAssets(){ _assetIndex=null; qs('#assetGrid')?.replaceChildren(Object.assign(document.createElement('div'),{innerHTML:'<div class="muted">Refreshingâ€¦</div>'})); initLibrary(); toast('Assets refreshed'); }

/* ======= boot ======= */
document.addEventListener('DOMContentLoaded',()=>{ initPath(); initFocusMode(); initWallpaper(); initXP(); loadQuips(); initLibrary(); initBuilder(); initBackupBanner(); initNotebook(); initAI(); initDrawer(); qs('#doItForMe')?.addEventListener('click',doItForMe); qs('#refreshAssets')?.addEventListener('click',refreshAssets); renderHotPicks(); });


